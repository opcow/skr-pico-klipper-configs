[gcode_macro PRINT_LEVEL_CHECK]
gcode:
  {% set BTEMP = params.BTEMP|default(60)|float %}
  {% set ETEMP = params.ETEMP|default(210)|float %}
#  START_PRINT BED_TEMP=BTEMP EXTRUDER_TEMP=ETEMP
#  M190 S{BTEMP}
#  M104 S{ETEMP}
#  M109 S{ETEMP}

  M104 S150 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
  G4 S10 ; allow partial nozzle warmup
    # Wait for bed to reach temperature
  M190 S{BTEMP}
    # Set and wait for nozzle to reach temperature
  M109 S{ETEMP}
  G28
  SDCARD_PRINT_FILE FILENAME=calibration_files/lcheck.gcode

[gcode_macro MOVE_CENTER]
gcode:
  {% set XPOS = params.XPOS|default(116.0)|float %}
  {% set YPOS = params.YPOS|default(119.0)|float %}
  {% set z_pos=printer.toolhead.position.z %}
  {% if z_pos < 0.6 %}
    {% set z_pos=0.6 %}
  {% endif %}
  {% if z_pos < 5 %}
    G1 Z5 F3000
  {% endif %}
  G1 X{XPOS} Y{YPOS} F5000.0
  G1 Z{z_pos} F3000

[gcode_macro MOVE_XCENTER]
gcode:
  MOVE_CENTER YPOS={printer.toolhead.position.y}

[gcode_macro MOVE_YCENTER]
gcode:
  MOVE_CENTER XPOS={printer.toolhead.position.x}

[gcode_macro ADJUST_SCREWS]
gcode:
  G28
  BED_SCREWS_ADJUST

[gcode_macro m600]
gcode:
  PAUSE

[gcode_macro m205]
gcode:
  G4

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

[homing_override]
# allow x and z to move before homing
set_position_z: 0
set_position_x: 0
gcode:
  {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
  {% set THRESH = driver_config.driver_sgthrs %}
  # M118 {THRESH}
  # reducing sensitivity avoids false trigger when slow homing
  # SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE=40
  # G4 P2000
  # move z up to avoid collisions
  G0 Z5
  # move x slightly to improve sensorless homing
  G0 X5
  G28 X0
  G28 Y0
  G28 Z0
  # SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE={THRESH}

[gcode_macro START_PRINT]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_up
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    # Start heating
  {% if printer.heater_bed.temperature < (BED_TEMP * 0.80) %}
    M104 S150 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
    G4 S10 ; allow partial nozzle warmup
  {% else %}
    M104 S{EXTRUDER_TEMP}
  {% endif %}
    # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # G28
  # BED_MESH_CALIBRATE
    # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
    # Use absolute coordinates
  G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.0
    # Home the printer and load mesh
  G28
  BED_MESH_PROFILE LOAD=default
#  BED_MESH_CLEAR
    # Move the nozzle near the bed
  G1 Z5 F3000
    # Move the nozzle very close to the bed
  G1 Z0.15 F300

  # Ender 3 Custom Start G-code
  G92 E0 ; Reset Extruder
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X0.4 Y20 Z0.3 F5000.0 ; Move to start position
  G1 X0.4 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
  G1 X0.7 Y200.0 Z0.3 F5000.0 ; Move to side a little
  G1 X0.7 Y20 Z0.3 F1500.0 E30 ; Draw the second line
  G92 E0 ; Reset Extruder
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

[gcode_macro F_CONSUMED]
variable_toolhead_position: 0
variable_filament_consumed: 0
variable_filament_lenght: 250   # length between the sensor and extruder

gcode: 
  # save current filament consumption
  SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
  # save current toolhead position
  SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=toolhead_position VALUE={printer.toolhead.position.z}
  # start checking filament consumption
  UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1
  
[delayed_gcode DELAY_M600]
gcode:
  # use set for easier reading
  {% set consumed=printer["gcode_macro F_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro F_CONSUMED"].filament_lenght %}
  {% set position=printer["gcode_macro F_CONSUMED"].toolhead_position %}
  # check if predetermine length is reached
  {% if printer.print_stats.filament_used|float <= (consumed|float + length|float - position|float) %}
    # start looping this script every second
    UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1
  {% else %}
    PAUSE
  {% endif %}